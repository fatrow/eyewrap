h1. eyewrap

Tracing execution of Clojure code.
Code is completely macroexpanded.
Feel free to tell me problem or code which doesn't work well.

h1. Installation

leiningen
:dev-dependencies [[eyewrap "0.5.9"]]

h1. Usage

<pre class="console">
user> (use 'hozumi.eyewrap)
nil
</pre>

h2. Tracing normal code

 *(cap code)* 

<pre class="console">
user> (cap (+ 1 2))
0 : + (+ 1 2)
0 :=> 3
3
</pre>

<pre class="console">
user> (cap (* 2 (+ (- 3 8) 4)))
0 : + (* 2 (+ (- 3 8) 4))
1 : +   (+ (- 3 8) 4)
2 : +     (- 3 8)
2 :=>     -5
1 :->   (+ -5 4)
1 :=>   -1
0 :-> (* 2 -1)
0 :=> -2
-2
</pre>

You can easily see the function which throw the exception.

<pre class="console">
user> (cap (+ 1 3 (- 2 3) (/ 2 0) (* 2 3)))
0 : + (+ 1 3 (- 2 3) (/ 2 0) (* 2 3))
1 : +   (- 2 3)
1 :=>   -1
0 :-> (+ 1 3 -1 (/ 2 0) (* 2 3))
1 : +   (/ 2 0)
1 :=>   #<ArithmeticException java.lang.ArithmeticException: Divide by zero>
0 :-> (+ 1 3 -1 #<ArithmeticException java.lang.ArithmeticException: Divide by zero> (* 2 3))
0 :=> #<ArithmeticException java.lang.ArithmeticException: Divide by zero>
#<ArithmeticException java.lang.ArithmeticException: Divide by zero>
</pre>

h2. Tracing defn

You can see the trace log after executing code by using special function which the cap generate.
 *(cap name (defn ... code)* 
 *(cap name (fn ... code)*
 *(cap name (code...)*

<pre class="console">
user> (cap ppp (defn touch [coll target-index]
		 (-> [(coll target-index)]
		     (into (subvec coll 0 target-index))
		     (into (subvec coll (inc target-index))))))
#'user/touch
</pre>

ppp turn to be function.

<pre class="console">
user> ppp
#<user$eval__2153$ppp__2209 user$eval__2153$ppp__2209@4ce1e2b3>
</pre>

still empty

<pre class="console">
user> (ppp)
nil
</pre>

Once target code has been called, ppp will print trace log.

<pre class="console">
user> (touch [1 2 3 4] 2)
[3 1 2 4]
</pre>

<pre class="console">
user> (ppp)
0 : + (into (into [(coll target-index)] (subvec coll 0 target-index)) (subvec coll (inc target-index)))
1 : +   (into [(coll target-index)] (subvec coll 0 target-index))
2 : +     [(coll target-index)]
3 : +       (coll target-index)
3 :->       ([1 2 3 4] target-index)
3 :->       ([1 2 3 4] 2)
3 :=>       3
2 :->     [3]
2 :=>     [3]
1 :->   (into [3] (subvec coll 0 target-index))
2 : +     (subvec coll 0 target-index)
2 :->     (subvec [1 2 3 4] 0 target-index)
2 :->     (subvec [1 2 3 4] 0 2)
2 :=>     [1 2]
1 :->   (into [3] [1 2])
1 :=>   [3 1 2]
0 :-> (into [3 1 2] (subvec coll (inc target-index)))
1 : +   (subvec coll (inc target-index))
1 :->   (subvec [1 2 3 4] (inc target-index))
2 : +     (inc target-index)
2 :->     (inc 2)
2 :=>     3
1 :->   (subvec [1 2 3 4] 3)
1 :=>   [4]
0 :-> (into [3 1 2] [4])
0 :=> [3 1 2 4]
nil
user>
</pre>

<pre class="console">
user> (touch [:a :b :c] 2)
[:c :a :b]
</pre>
<pre class="console">
user> (ppp)
0 : + (into (into [(coll target-index)] (subvec coll 0 target-index)) (subvec coll (inc target-index)))
1 : +   (into [(coll target-index)] (subvec coll 0 target-index))
2 : +     [(coll target-index)]
3 : +       (coll target-index)
3 :->       ([:a :b :c] target-index)
3 :->       ([:a :b :c] 2)
3 :=>       :c
2 :->     [:c]
2 :=>     [:c]
1 :->   (into [:c] (subvec coll 0 target-index))
2 : +     (subvec coll 0 target-index)
2 :->     (subvec [:a :b :c] 0 target-index)
2 :->     (subvec [:a :b :c] 0 2)
2 :=>     [:a :b]
1 :->   (into [:c] [:a :b])
1 :=>   [:c :a :b]
0 :-> (into [:c :a :b] (subvec coll (inc target-index)))
1 : +   (subvec coll (inc target-index))
1 :->   (subvec [:a :b :c] (inc target-index))
2 : +     (inc target-index)
2 :->     (inc 2)
2 :=>     3
1 :->   (subvec [:a :b :c] 3)
1 :=>   []
0 :-> (into [:c :a :b] [])
0 :=> [:c :a :b]
nil
user>
</pre>


There are a few command line options that you may find interesting for if you want to change the looks of trace log,
or figure out where a problem is.


Using the *:pp* option, the trace log is pprinted.

<pre class="console">
user> (ppp :pp)
0 : + (into
       (into [(coll target-index)] (subvec coll 0 target-index))
       (subvec coll (inc target-index)))
1 : +   (into [(coll target-index)] (subvec coll 0 target-index))
2 : +     [(coll target-index)]
3 : +       (coll target-index)
3 :->       ([:a :b :c] target-index)
3 :->       ([:a :b :c] 2)
3 :=>       :c
2 :->     [:c]
2 :=>     [:c]
1 :->   (into [:c] (subvec coll 0 target-index))
2 : +     (subvec coll 0 target-index)
2 :->     (subvec [:a :b :c] 0 target-index)
2 :->     (subvec [:a :b :c] 0 2)
2 :=>     [:a :b]
1 :->   (into [:c] [:a :b])
1 :=>   [:c :a :b]
0 :-> (into [:c :a :b] (subvec coll (inc target-index)))
1 : +   (subvec coll (inc target-index))
1 :->   (subvec [:a :b :c] (inc target-index))
2 : +     (inc target-index)
2 :->     (inc 2)
2 :=>     3
1 :->   (subvec [:a :b :c] 3)
1 :=>   []
0 :-> (into [:c :a :b] [])
0 :=> [:c :a :b]
nil
user>
</pre>

Using the *:v* option, you can print id number which the expression of same line correspond.

<pre class="console">
user> (ppp :v)
0 : 20: + (into (into [(coll target-index)] (subvec coll 0 target-index)) (subvec coll (inc target-index)))
1 : 22: +   (into [(coll target-index)] (subvec coll 0 target-index))
2 : 24: +     [(coll target-index)]
3 : 25: +       (coll target-index)
3 : 25:->       ([:a :b :c] target-index)
3 : 25:->       ([:a :b :c] 2)
3 : 25:=>       :c
2 : 24:->     [:c]
2 : 24:=>     [:c]
1 : 22:->   (into [:c] (subvec coll 0 target-index))
2 : 28: +     (subvec coll 0 target-index)
2 : 28:->     (subvec [:a :b :c] 0 target-index)
2 : 28:->     (subvec [:a :b :c] 0 2)
2 : 28:=>     [:a :b]
1 : 22:->   (into [:c] [:a :b])
1 : 22:=>   [:c :a :b]
0 : 20:-> (into [:c :a :b] (subvec coll (inc target-index)))
1 : 33: +   (subvec coll (inc target-index))
1 : 33:->   (subvec [:a :b :c] (inc target-index))
2 : 36: +     (inc target-index)
2 : 36:->     (inc 2)
2 : 36:=>     3
1 : 33:->   (subvec [:a :b :c] 3)
1 : 33:=>   []
0 : 20:-> (into [:c :a :b] [])
0 : 20:=> [:c :a :b]
nil
user>
</pre>



Using the *:number* option, the preview trace log is printed.

<pre class="console">
user> (ppp :v :1)
0 :  1: + (into (into [(coll target-index)] (subvec coll 0 target-index)) (subvec coll (inc target-index)))
1 :  3: +   (into [(coll target-index)] (subvec coll 0 target-index))
2 :  5: +     [(coll target-index)]
3 :  6: +       (coll target-index)
3 :  6:->       ([1 2 3 4] target-index)
3 :  6:->       ([1 2 3 4] 2)
3 :  6:=>       3
2 :  5:->     [3]
2 :  5:=>     [3]
1 :  3:->   (into [3] (subvec coll 0 target-index))
2 :  9: +     (subvec coll 0 target-index)
2 :  9:->     (subvec [1 2 3 4] 0 target-index)
2 :  9:->     (subvec [1 2 3 4] 0 2)
2 :  9:=>     [1 2]
1 :  3:->   (into [3] [1 2])
1 :  3:=>   [3 1 2]
0 :  1:-> (into [3 1 2] (subvec coll (inc target-index)))
1 : 14: +   (subvec coll (inc target-index))
1 : 14:->   (subvec [1 2 3 4] (inc target-index))
2 : 17: +     (inc target-index)
2 : 17:->     (inc 2)
2 : 17:=>     3
1 : 14:->   (subvec [1 2 3 4] 3)
1 : 14:=>   [4]
0 :  1:-> (into [3 1 2] [4])
0 :  1:=> [3 1 2 4]
nil
user> </pre>


Using the *:all* option, the all trace log is printed.

<pre class="console">
user> (ppp :v :all)
----------------------------------------------------------------------------------------------------
0 :  1: + (into (into [(coll target-index)] (subvec coll 0 target-index)) (subvec coll (inc target-index)))
1 :  3: +   (into [(coll target-index)] (subvec coll 0 target-index))
2 :  5: +     [(coll target-index)]
3 :  6: +       (coll target-index)
3 :  6:->       ([1 2 3 4] target-index)
3 :  6:->       ([1 2 3 4] 2)
3 :  6:=>       3
2 :  5:->     [3]
2 :  5:=>     [3]
1 :  3:->   (into [3] (subvec coll 0 target-index))
2 :  9: +     (subvec coll 0 target-index)
2 :  9:->     (subvec [1 2 3 4] 0 target-index)
2 :  9:->     (subvec [1 2 3 4] 0 2)
2 :  9:=>     [1 2]
1 :  3:->   (into [3] [1 2])
1 :  3:=>   [3 1 2]
0 :  1:-> (into [3 1 2] (subvec coll (inc target-index)))
1 : 14: +   (subvec coll (inc target-index))
1 : 14:->   (subvec [1 2 3 4] (inc target-index))
2 : 17: +     (inc target-index)
2 : 17:->     (inc 2)
2 : 17:=>     3
1 : 14:->   (subvec [1 2 3 4] 3)
1 : 14:=>   [4]
0 :  1:-> (into [3 1 2] [4])
0 :  1:=> [3 1 2 4]
----------------------------------------------------------------------------------------------------
0 : 20: + (into (into [(coll target-index)] (subvec coll 0 target-index)) (subvec coll (inc target-index)))
1 : 22: +   (into [(coll target-index)] (subvec coll 0 target-index))
2 : 24: +     [(coll target-index)]
3 : 25: +       (coll target-index)
3 : 25:->       ([:a :b :c] target-index)
3 : 25:->       ([:a :b :c] 2)
3 : 25:=>       :c
2 : 24:->     [:c]
2 : 24:=>     [:c]
1 : 22:->   (into [:c] (subvec coll 0 target-index))
2 : 28: +     (subvec coll 0 target-index)
2 : 28:->     (subvec [:a :b :c] 0 target-index)
2 : 28:->     (subvec [:a :b :c] 0 2)
2 : 28:=>     [:a :b]
1 : 22:->   (into [:c] [:a :b])
1 : 22:=>   [:c :a :b]
0 : 20:-> (into [:c :a :b] (subvec coll (inc target-index)))
1 : 33: +   (subvec coll (inc target-index))
1 : 33:->   (subvec [:a :b :c] (inc target-index))
2 : 36: +     (inc target-index)
2 : 36:->     (inc 2)
2 : 36:=>     3
1 : 33:->   (subvec [:a :b :c] 3)
1 : 33:=>   []
0 : 20:-> (into [:c :a :b] [])
0 : 20:=> [:c :a :b]
nil
user> </pre>



Using the *ids* option, you can print only the specific expression which id correspond to.
The ids can be multiple, but must be in a position anterior to other option.
This option is useful especially for tracing closure.
<pre class="console">

user> (ppp 9 22 :v)
====================================================================================================
0 :  9: + (subvec coll 0 target-index)
0 :  9:-> (subvec [1 2 3 4] 0 target-index)
0 :  9:-> (subvec [1 2 3 4] 0 2)
0 :  9:=> [1 2]
====================================================================================================
0 : 22: + (into [(coll target-index)] (subvec coll 0 target-index))
1 : 24: +   [(coll target-index)]
2 : 25: +     (coll target-index)
2 : 25:->     ([:a :b :c] target-index)
2 : 25:->     ([:a :b :c] 2)
2 : 25:=>     :c
1 : 24:->   [:c]
1 : 24:=>   [:c]
0 : 22:-> (into [:c] (subvec coll 0 target-index))
1 : 28: +   (subvec coll 0 target-index)
1 : 28:->   (subvec [:a :b :c] 0 target-index)
1 : 28:->   (subvec [:a :b :c] 0 2)
1 : 28:=>   [:a :b]
0 : 22:-> (into [:c] [:a :b])
0 : 22:=> [:c :a :b]
nil
user> 
</pre>

If the corresponding expression is fn, ppp automatically print only previous executed trace log.
So if you want to print all trace log, the :all option can be used.

Using the *:i* option, you can print eyewrap's internal data.
Using the *:c* option, the all trace cache is cleared.


h1. Not support

h3. *recur. mutable data (can be used, but displayed as uptodate value.)*


 
h3. License

Eclipse Public License - v 1.0
